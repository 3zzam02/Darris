<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>معرض الصور مع الوصف - API/محلي</title>
    <style>
        /* نفس التنسيق السابق بدون تغيير */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .upload-section {
            margin-bottom: 20px;
            text-align: center;
        }

        .upload-btn {
            display: inline-block;
            padding: 12px 24px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .upload-btn:hover {
                background-color: #45a049;
            }

        #fileInput {
            display: none;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .image-card {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            background: white;
            display: flex;
            flex-direction: column;
        }

        .gallery-image {
            width: 100%;
            height: 180px;
            object-fit: cover;
            display: block;
        }

        .image-actions {
            padding: 12px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .view-btn, .remove-btn, .edit-btn, .save-btn {
            padding: 8px 12px;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

        .view-btn {
            background-color: #2196F3;
        }

        .remove-btn {
            background-color: #f44336;
        }

        .edit-btn {
            background-color: #ff9800;
        }

        .save-btn {
            background-color: #4CAF50;
            display: none;
        }

        .description {
            padding: 8px 0;
            font-size: 14px;
            color: #555;
            min-height: 40px;
        }

        .description-input {
            width: 100%;
            padding: 8px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            display: none;
        }

        .info-text {
            text-align: center;
            margin: 15px 0;
            color: #666;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            max-width: 90%;
            max-height: 90%;
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .modal-image {
            max-width: 100%;
            max-height: 70vh;
            object-fit: contain;
            margin-bottom: 15px;
        }

        .modal-description {
            color: #333;
            font-size: 16px;
            margin-bottom: 15px;
        }

        .close-modal {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            font-size: 30px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="upload-section">
            <label for="fileInput" class="upload-btn">+ إضافة صور</label>
            <input type="file" id="fileInput" accept="image/*" multiple onchange="handleUpload(this.files)">
            <p class="info-text">يمكنك إضافة وصف لكل صورة عن طريق زر "تعديل"</p>
        </div>
        <div class="controls">
            <button class="remove-btn" onclick="removeAllImages()">حذف الكل</button>
            <span id="imageCount">0 صور مضافة</span>
        </div>
        <div id="gallery" class="gallery"></div>
    </div>

    <div id="imageModal" class="modal" onclick="closeModal()">
        <span class="close-modal">&times;</span>
        <div class="modal-content">
            <img id="modalImage" class="modal-image">
            <div id="modalDescription" class="modal-description"></div>
        </div>
    </div>

    <script>
        const useApi = false; // true = use backend API, false = local mode
        let images = [];
        const apiBaseUrl = 'https://your-api-url.com/api/images';

        function updateImageCount() {
            document.getElementById('imageCount').textContent = `${images.length} صور مضافة`;
        }

        function handleUpload(files) {
            if (useApi) {
                document.getElementById('fileInput').files = files;
                uploadImages();
            } else {
                for (let i = 0; i < files.length; i++) {
                    const imageUrl = URL.createObjectURL(files[i]);
                    images.push({ url: imageUrl, name: files[i].name, description: '' });
                }
                updateImageCount();
                displayAllImages();
            }
        }

        function displayAllImages() {
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = '';

            images.forEach((image, index) => {
                const imageCard = document.createElement('div');
                imageCard.className = 'image-card';
                imageCard.innerHTML = `
                  <img src="${image.url}" class="gallery-image" alt="${image.name}">
                  <div class="image-actions">
                    <div class="description" id="desc-${index}">${image.description || 'لا يوجد وصف'}</div>
                    <textarea class="description-input" id="input-${index}" placeholder="أدخل وصف الصورة">${image.description}</textarea>
                    <button class="view-btn" onclick="viewImage(${index})">عرض</button>
                    <button class="edit-btn" onclick="toggleEdit(${index})">تعديل</button>
                    <button class="save-btn" onclick="saveDescription(${index})" id="save-${index}">حفظ</button>
                    <button class="remove-btn" onclick="removeImage(${index})">حذف</button>
                  </div>`;

                gallery.appendChild(imageCard);
            });
        }

        function toggleEdit(index) {
            const desc = document.getElementById(`desc-${index}`);
            const input = document.getElementById(`input-${index}`);
            const save = document.getElementById(`save-${index}`);
            const show = desc.style.display === 'none';
            desc.style.display = show ? 'block' : 'none';
            input.style.display = show ? 'none' : 'block';
            save.style.display = show ? 'none' : 'block';
        }

        function saveDescription(index) {
            const newText = document.getElementById(`input-${index}`).value;
            images[index].description = newText;
            document.getElementById(`desc-${index}`).textContent = newText || 'لا يوجد وصف';
            toggleEdit(index);
        }

        function viewImage(index) {
            document.getElementById('imageModal').style.display = 'flex';
            document.getElementById('modalImage').src = images[index].url;
            document.getElementById('modalDescription').textContent = images[index].description || 'لا يوجد وصف';
        }

        function closeModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        function removeImage(index) {
            if (confirm('هل أنت متأكد من حذف هذه الصورة؟')) {
                if (!useApi) URL.revokeObjectURL(images[index].url);
                images.splice(index, 1);
                updateImageCount();
                displayAllImages();
            }
        }

        function removeAllImages() {
            if (images.length > 0 && confirm('هل أنت متأكد من حذف جميع الصور؟')) {
                if (!useApi) images.forEach(img => URL.revokeObjectURL(img.url));
                images = [];
                updateImageCount();
                displayAllImages();
            }
        }

        async function uploadImages() {
            const files = document.getElementById('fileInput').files;
            for (let i = 0; i < files.length; i++) {
                const formData = new FormData();
                formData.append('File', files[i]);
                formData.append('Title', files[i].name);
                formData.append('Description', '');

                try {
                    const response = await fetch(apiBaseUrl, { method: 'POST', body: formData });
                    if (!response.ok) throw new Error('Upload failed');
                } catch (error) {
                    console.error('Upload error:', error);
                }
            }
            loadImages();
        }

        async function loadImages() {
            try {
                const response = await fetch(apiBaseUrl);
                if (!response.ok) throw new Error('Load failed');
                images = await response.json();
                updateImageCount();
                displayAllImages();
            } catch (error) {
                console.error('Load error:', error);
            }
        }

        if (useApi) {
            window.onload = loadImages;
        }
    </script>
</body>
</html>
